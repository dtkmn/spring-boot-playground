name: Spring Boot Java CI with Gradle

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'


    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3

    - name: Build with Gradle Wrapper
      run: ./gradlew build --no-daemon

  build-and-publish: # Renamed from dependency-submission

    runs-on: ubuntu-latest
    needs: build # Depends on the build job
    permissions:
      contents: write # For dependency submission
      packages: write # For pushing to GHCR

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Setup Gradle for dependency submission
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      env:
        REPO_OWNER: ${{ github.repository_owner }}
        IMAGE_BASENAME: ${{ github.event.repository.name }}
      run: |
        SHORT_SHA=$(git rev-parse --short HEAD)
        # Use repository owner in lowercase for the image name to avoid issues with mixed-case usernames
        LOWER_REPO_OWNER=$(echo "$REPO_OWNER" | tr '[:upper:]' '[:lower:]')
        IMAGE_NAME="ghcr.io/$LOWER_REPO_OWNER/$IMAGE_BASENAME"

        echo "Building image: ${IMAGE_NAME}:${SHORT_SHA} and ${IMAGE_NAME}:latest"
        docker build . -t "${IMAGE_NAME}:${SHORT_SHA}" -t "${IMAGE_NAME}:latest"

        echo "Pushing image: ${IMAGE_NAME}:${SHORT_SHA}"
        docker push "${IMAGE_NAME}:${SHORT_SHA}"

        # Only push latest tag if on main branch
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "Pushing image: ${IMAGE_NAME}:latest"
          docker push "${IMAGE_NAME}:latest"
        fi